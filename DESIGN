Design notes
===

This is a Spring MVC app. If you are not familiar with it, start here:
https://spring.io/guides/tutorials/bookmarks/
https://spring.io/guides/gs/rest-service/

Controllers are the entry points into the service. JSON requests and
responses are represented as POJOs e.g. MungingRequest, MungingResponse.
JSON conversion is done implicitly through MappingJackson2HttpMessageConverter.

Controller methods are asynchronous, they return Callable<R> instead
of a response type R. For such controller methods, Spring MVC uses
Servlet 3.0 async processing to offload the handling of the request
to a different thread.

The underlying service layer is designed to work with either Strings or
text streams. Both approaches use the Java 8 Streams API to produce a
stream of tokens and process the tokens, but in different ways.
* Service methods that work on Strings use a Spliterator that tries
  to split the String into parallel chunks, so that the pipeline
  can work in parallel across all the cores on your system.
  See the classes ParallelTokenizingSpliterator and ParallelNgramSpliterator.
* Service methods that work on InputStreams cannot parallelize the work.
  These use the SequentialTokenizingStream class to tokenize the incoming
  text stream, and a custom Consumer to update the counts for each
  token in turn.

The JSON endpoints, as specified in the problem statement, are not well
suited for streaming. Therefore the service has to read the entire
request in memory before beginning processing. This will not work with
request bodies large enough to overflow the JVM heap.
I am anticipating a future service endpoint in which you simply upload text.

Everything is in one JAR, but in real life the business logic and
the web service would be in different JARs, built separately.

We use raw types (String, int) but for better design we should have
value types, e.g. for token counts which must be unsigned ints.

For the /format endpoint, the format of the phrase pairs at input
is poorly specified. There's nothing preventing the delimiter sequences,
&, $, |, or PP, from occurring anywhere in the phrase pair, e.g. in the
'other info' field. The current implementation scans for
the string 'PP' followed by space followed by an integer followed
 by a space followed by another integer.
